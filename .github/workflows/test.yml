name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run performance tests weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Unit and Integration Tests
  unit-integration-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: coderunner_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test environment
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgres://test:test@localhost:5432/coderunner_test" >> .env.test
        echo "TEST_DATABASE_URL=postgres://test:test@localhost:5432/coderunner_test" >> .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "JWT_SECRET=test-jwt-secret-for-ci" >> .env.test
        echo "ENCRYPTION_KEY=test-encryption-key-32-characters" >> .env.test

    - name: Run database migrations
      run: npm run migrate
      env:
        NODE_ENV: test
        DATABASE_URL: postgres://test:test@localhost:5432/coderunner_test

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test

    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test

    - name: Run WebSocket tests
      run: npm run test:websocket
      env:
        NODE_ENV: test

    - name: Generate coverage report
      run: npm run test:coverage
      env:
        NODE_ENV: test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results/
        retention-days: 30

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: unit-integration-tests

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: coderunner_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: Setup test environment
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgres://test:test@localhost:5432/coderunner_test" >> .env.test
        echo "TEST_DATABASE_URL=postgres://test:test@localhost:5432/coderunner_test" >> .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "JWT_SECRET=test-jwt-secret-for-ci" >> .env.test
        echo "ENCRYPTION_KEY=test-encryption-key-32-characters" >> .env.test

    - name: Run database migrations
      run: npm run migrate
      env:
        NODE_ENV: test
        DATABASE_URL: postgres://test:test@localhost:5432/coderunner_test

    - name: Start application
      run: |
        npm run build
        npm run start &
        sleep 10
      env:
        NODE_ENV: test
        PORT: 3000

    - name: Wait for application
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

    - name: Run E2E tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        BASE_URL: http://localhost:3000

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-results-${{ matrix.browser }}
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  # Performance Tests (only on schedule or manual trigger)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: coderunner_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test environment
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgres://test:test@localhost:5432/coderunner_test" >> .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "JWT_SECRET=test-jwt-secret-for-ci" >> .env.test
        echo "ENCRYPTION_KEY=test-encryption-key-32-characters" >> .env.test

    - name: Run database migrations
      run: npm run migrate
      env:
        NODE_ENV: test
        DATABASE_URL: postgres://test:test@localhost:5432/coderunner_test

    - name: Start application for performance testing
      run: |
        npm run build
        NODE_ENV=production npm run start &
        sleep 15
      env:
        PORT: 3000
        DATABASE_URL: postgres://test:test@localhost:5432/coderunner_test

    - name: Wait for application
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

    - name: Run API load tests
      run: npm run test:performance
      env:
        TARGET_URL: http://localhost:3000

    - name: Run WebSocket load tests
      run: npx artillery run tests/performance/websocket-load-test.yml
      env:
        TARGET_URL: ws://localhost:3000

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          artillery-results/
          performance-reports/
        retention-days: 90

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level=high
      continue-on-error: true

    - name: Run CodeQL analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: Perform CodeQL analysis
      uses: github/codeql-action/analyze@v2

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Code Quality Checks
  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for SonarCloud

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting with reports
      run: |
        npm run lint -- --format json --output-file eslint-report.json || true
        npm run lint -- --format stylish

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Check formatting
      run: npx prettier --check "src/**/*.{ts,js,json,md}"

    - name: Run SonarCloud scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Deployment Readiness Check (for main branch)
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [unit-integration-tests, e2e-tests, security-scan, quality-checks]

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: coderunner_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Setup production-like environment
      run: |
        cp .env.example .env.production
        echo "DATABASE_URL=postgres://test:test@localhost:5432/coderunner_test" >> .env.production
        echo "NODE_ENV=production" >> .env.production
        echo "JWT_SECRET=production-jwt-secret-for-ci-test" >> .env.production
        echo "ENCRYPTION_KEY=production-encryption-key-32-char" >> .env.production

    - name: Run database migrations
      run: npm run migrate
      env:
        NODE_ENV: production
        DATABASE_URL: postgres://test:test@localhost:5432/coderunner_test

    - name: Start application in production mode
      run: |
        NODE_ENV=production npm run start &
        sleep 10
      env:
        PORT: 3000

    - name: Run smoke tests
      run: npm run test:smoke
      env:
        BASE_URL: http://localhost:3000

    - name: Check application health
      run: |
        curl -f http://localhost:3000/health
        curl -f http://localhost:3000/api/health/detailed

    - name: Generate deployment artifact
      run: |
        tar -czf coderunner-${{ github.sha }}.tar.gz \
          dist/ \
          package.json \
          package-lock.json \
          .env.example \
          src/migrations/ \
          README.md

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifact-${{ github.sha }}
        path: coderunner-${{ github.sha }}.tar.gz
        retention-days: 90

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [unit-integration-tests, e2e-tests, security-scan, quality-checks]

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate test summary
      run: |
        echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "test-results-18.x" ] || [ -d "test-results-20.x" ]; then
          echo "## ✅ Unit & Integration Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js 18.x: ${{ needs.unit-integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js 20.x: ${{ needs.unit-integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -d "e2e-results-chromium" ] || [ -d "e2e-results-firefox" ] || [ -d "e2e-results-webkit" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🌐 E2E Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Chromium: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Firefox: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- WebKit: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔒 Security Scan" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Code Quality" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ needs.quality-checks.result }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "performance-results" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ⚡ Performance Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Status: Completed (weekly schedule)" >> $GITHUB_STEP_SUMMARY
        fi