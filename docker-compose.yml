# CodeRunner v2.0 - Simple Development Docker Compose
# For 6-day MVP sprint

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: coderunner-postgres
    environment:
      POSTGRES_DB: coderunner
      POSTGRES_USER: coderunner
      POSTGRES_PASSWORD: coderunner123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/migrations:/docker-entrypoint-initdb.d
    networks:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coderunner"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # CodeRunner API
  api:
    build: .
    container_name: coderunner-api
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=coderunner
      - DB_USER=coderunner
      - DB_PASSWORD=coderunner123
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis (for future WebSocket scaling)
  redis:
    image: redis:7-alpine
    container_name: coderunner-redis
    command: redis-server --requirepass redis123 --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s

networks:
  app:
    driver: bridge
    name: coderunner-app

volumes:
  postgres_data:
    name: coderunner-postgres-data
  redis_data:
    name: coderunner-redis-data